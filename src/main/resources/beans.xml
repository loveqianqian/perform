<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ /*
  ~  *****************************************************************************
  ~  * Copyright ( c ) 2016 Heren Tianjin Inc. All Rights Reserved.
  ~  *
  ~  * This software is the confidential and proprietary information of Heren Tianjin Inc
  ~  * ("Confidential Information").  You shall not disclose such Confidential Information
  ~  *  and shall use it only in accordance with the terms of the license agreement
  ~  *  you entered into with Heren Tianjin or a Heren Tianjin authorized
  ~  *  reseller (the "License Agreement").
  ~  ****************************************************************************
  ~  */
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
			
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/task
            http://www.springframework.org/schema/task/spring-task-3.0.xsd" >

    <context:annotation-config/>
    <context:component-scan base-package="com.herench.convert"/>
    <context:component-scan base-package="com.herench.dao"/>
    <context:component-scan base-package="com.herench.command"/>
    <context:component-scan base-package="com.herench.utils"/>

    <task:scheduled-tasks>
        <!--<task:scheduled ref="taskJob" method="jobFirst" cron="0 59 14 3 * ?"/>-->
        <task:scheduled ref="taskJob" method="jobFirst" cron="0 10 0 4 * ?"/>
    </task:scheduled-tasks>

    <!-- c3p0连接池配置 -->
    <bean id="hisDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">

        <property name="user" value="mid"/>
        <property name="password" value="mid"/>
        <property name="driverClass" value="oracle.jdbc.OracleDriver"/>
        <property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.15.221/oracle"/>

        <!--连接池中保留的最大连接数。默认值: 15 -->
        <property name="maxPoolSize" value="15"/>
        <!-- 连接池中保留的最小连接数，默认为：3-->
        <property name="minPoolSize" value="3"/>
        <!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3-->
        <property name="initialPoolSize" value="3"/>
        <!--最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 -->
        <property name="maxIdleTime" value="60"/>
        <!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 -->
        <property name="checkoutTimeout" value="180000"/>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
        <property name="acquireIncrement" value="3"/>
        <!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次-->
        <property name="acquireRetryAttempts" value="3"/>
        <!--重新尝试的时间间隔，默认为：1000毫秒-->
        <property name="acquireRetryDelay" value="1000"/>
        <!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 -->
        <property name="autoCommitOnClose" value="false"/>
        <!--如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: false-->
        <property name="breakAfterAcquireFailure" value="false"/>
        <!--每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
        <property name="idleConnectionTestPeriod" value="60"/>
        <!--c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 0-->
        <property name="maxStatements" value="100"/>
        <!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。默认值: 0 -->
        <property name="maxStatementsPerConnection" value="5"/>
    </bean>

    <bean id="hisSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="hisDataSource"/>
        <property name="configLocation" value="classpath:mybatis-basic-his.cfg.xml"/>
        <property name="mapperLocations">
            <list>
                <value>classpath*:hisMapper/*.xml</value>
            </list>
        </property>
    </bean>

    <bean name="hisTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="hisDataSource"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.herench.dao.his"/>
        <property name="sqlSessionFactoryBeanName" value="hisSqlSessionFactory"/>
    </bean>

    <!-- c3p0连接池配置 -->
    <bean id="performDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="sa"/>
        <property name="password" value="gengshuo"/>
        <property name="driverClass" value="com.microsoft.sqlserver.jdbc.SQLServerDriver"/>
        <property name="jdbcUrl" value="jdbc:sqlserver://192.168.11.17:1433;DatabaseName=xqjxpt"/>
        <!--连接池中保留的最大连接数。默认值: 15 -->
        <property name="maxPoolSize" value="15"/>
        <!-- 连接池中保留的最小连接数，默认为：3-->
        <property name="minPoolSize" value="3"/>
        <!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3-->
        <property name="initialPoolSize" value="3"/>
        <!--最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 -->
        <property name="maxIdleTime" value="60"/>
        <!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 -->
        <property name="checkoutTimeout" value="180000"/>
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
        <property name="acquireIncrement" value="3"/>
        <!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次-->
        <property name="acquireRetryAttempts" value="3"/>
        <!--重新尝试的时间间隔，默认为：1000毫秒-->
        <property name="acquireRetryDelay" value="1000"/>
        <!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 -->
        <property name="autoCommitOnClose" value="false"/>
        <!--如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: false-->
        <property name="breakAfterAcquireFailure" value="false"/>
        <!--每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
        <property name="idleConnectionTestPeriod" value="60"/>
        <!--c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 0-->
        <property name="maxStatements" value="100"/>
        <!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。默认值: 0 -->
        <property name="maxStatementsPerConnection" value="5"/>
    </bean>

    <bean id="performSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="performDataSource"/>
        <property name="configLocation" value="classpath:mybatis-basic-perform.cfg.xml"/>
        <property name="mapperLocations">
            <list>
                <value>classpath*:performMapper/*.xml</value>
            </list>
        </property>
    </bean>

    <bean name="performTransactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="performDataSource"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.herench.dao.perform"/>
        <property name="sqlSessionFactoryBeanName" value="performSqlSessionFactory"/>
    </bean>

    <tx:annotation-driven transaction-manager="performTransactionManager"/>

    <beans profile="default">
        <context:property-placeholder location="classpath:trans.properties"/>
    </beans>


</beans>